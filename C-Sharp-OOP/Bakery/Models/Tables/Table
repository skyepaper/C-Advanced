using Bakery.Models.BakedFoods.Contracts;
using Bakery.Models.Drinks.Contracts;
using Bakery.Models.Tables.Contracts;
using Bakery.Utilities.Messages;
using System;
using System.Collections.Generic;
using System.Text;

namespace Bakery.Models.Tables
{
    public abstract class Table : ITable
    {
        private int capacity;
        private int numberOfPeople;
        private bool reserve = false;
       
        private readonly List<IBakedFood> foodOrders;
        private readonly List<IDrink> drinkOrders;

        public Table(int tableNumber,int capacity,decimal pricePerPerson)
        {
            this.TableNumber = tableNumber;
            this.Capacity = capacity;
            this.PricePerPerson = pricePerPerson;

            foodOrders = new List<IBakedFood>();
            drinkOrders = new List<IDrink>();
        }

        public int TableNumber { get; private set; }
        public int Capacity
        {
            get
            {
                return capacity;
            }
            private set
            {
                if (value < 0)
                    throw new ArgumentException(ExceptionMessages.InvalidTableCapacity);
                capacity = value;
            }
        }
        public int NumberOfPeople
        {
            get
            {
                return numberOfPeople;
            }
            private set
            {
                if (value <=0)
                    throw new ArgumentException(ExceptionMessages.InvalidNumberOfPeople);
                numberOfPeople = value;
            }
        }
        public decimal PricePerPerson { get; private set; }
        public bool IsReserved => reserve;
        public decimal Price => this.NumberOfPeople*this.PricePerPerson;

        public void Clear()
        {
            foodOrders.Clear();
            drinkOrders.Clear();
            this.reserve = false;
            this.NumberOfPeople = 0;
        }
        public decimal GetBill()
        {
            decimal sumPrices = 0;
            foreach (var food in foodOrders) sumPrices += food.Price;
            foreach (var drink in drinkOrders) sumPrices += drink.Price;
           // sumPrices += this.Price;

            return sumPrices;
        }
        public string GetFreeTableInfo()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine($"Table: {this.TableNumber}");
            sb.AppendLine($"Type: {this.GetType()}");
            sb.AppendLine($"Capacity: {this.Capacity}");
            sb.AppendLine($"Price per Person: {this.PricePerPerson}");

            return sb.ToString().Trim();
        }
        public void OrderDrink(IDrink drink)
        {
            drinkOrders.Add(drink);
        }
        public void OrderFood(IBakedFood food)
        {
            foodOrders.Add(food);
        }
        public void Reserve(int numberOfPeople)
        {
            this.NumberOfPeople = numberOfPeople;
            reserve = true;
        }
    }
}
